import pytest
from whatsapp_bot import WhatsAppBot



# üîπ Prueba para verificar que los c√≥digos de pa√≠s sean correctos
@pytest.mark.parametrize("pais, esperado", [
    ("Colombia", 57),
    ("Espa√±a", 34),
    ("Estados Unidos", 1),
    ("Bangladesh", 880),
    ("Brasil", 55),
    ("Argentina", 54),
    ("M√©xico", 52),
    ("Jap√≥n", 81),
    ("China", 86),
    ("Francia", 33),
    ("Rusia", 7),
])
def test_obtener_codigo_pais(pais, esperado):
    bot = WhatsAppBot("Colombia", "mio", "data/guion_sherk2.txt")
    assert bot.obtener_codigos_pais()[pais] == esperado


# üîπ Prueba para validar la generaci√≥n de un n√∫mero completo
def test_generar_numero_completo():
    bot = WhatsAppBot("Colombia", "mio", "data/guion_sherk2.txt")
    numero_completo = bot.generar_numero_completo()
    assert numero_completo == "573155781585"  # C√≥digo de Colombia + n√∫mero del contacto "mio"


# üîπ Prueba para verificar el manejo de errores al generar n√∫meros inv√°lidos
def test_generar_numero_completo_error():
    bot = WhatsAppBot("Pa√≠sInexistente", "mio", "data/guion_sherk2.txt")
    with pytest.raises(ValueError):
        bot.generar_numero_completo()


# üîπ Prueba para asegurar que el bot maneja n√∫meros inexistentes correctamente
def test_generar_numero_completo_numero_invalido():
    bot = WhatsAppBot("Colombia", "contacto_no_existe", "data/guion_sherk2.txt")
    with pytest.raises(ValueError):
        bot.generar_numero_completo()


# üîπ Prueba para verificar si el archivo de mensajes existe antes de enviar
def test_archivo_mensajes_existe():
    bot = WhatsAppBot("Colombia", "mio", "data/guion_sherk2.txt")
    try:
        with open(bot.ruta_archivo, 'r', encoding='utf-8') as f:
            contenido = f.read()
        assert len(contenido) > 0  # El archivo debe tener contenido
    except FileNotFoundError:
        pytest.fail("‚ùå El archivo de mensajes no existe")


# üîπ Prueba para verificar que el diccionario de n√∫meros de WhatsApp tenga contenido
def test_obtener_numeros_whatsapp():
    bot = WhatsAppBot("Colombia", "mio", "data/guion_sherk2.txt")
    numeros = bot.obtener_numeros_whatsapp()
    assert isinstance(numeros, dict) and len(numeros) > 0


# üîπ Prueba para asegurar que se devuelven los contactos correctos
@pytest.mark.parametrize("contacto, esperado", [
    ("mio", 0000000000),
    ("amigo1", 1111111111),
    ("amigo2", 2222222222),
    ("amigo3", 3333333333),
    ("amigo4", 4444444444),
    ("amigo5", 9999999999),  # ‚ö†Ô∏è N√∫mero de ejemplo no v√°lido
])

def test_obtener_numeros_whatsapp_contactos(contacto, esperado):
    bot = WhatsAppBot("Colombia", "mio", "data/guion_sherk2.txt")
    assert bot.obtener_numeros_whatsapp()[contacto] == esperado
